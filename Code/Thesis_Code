{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPQNYZfw/JXAeezcRdkCHaR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"I8GOpgtI2fZ_","executionInfo":{"status":"ok","timestamp":1750855801145,"user_tz":-120,"elapsed":25576,"user":{"displayName":"Md Rubayet Afsan","userId":"06903711452074768618"}},"outputId":"9077af07-7a37-4e2e-dd59-1c744d9dd76f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (5.24.1)\n","Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\n","Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n","Requirement already satisfied: openai in /usr/local/lib/python3.11/dist-packages (1.87.0)\n","Requirement already satisfied: xlrd in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: faker in /usr/local/lib/python3.11/dist-packages (37.4.0)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (3.9.1)\n","Requirement already satisfied: textstat in /usr/local/lib/python3.11/dist-packages (0.7.7)\n","Requirement already satisfied: vaderSentiment in /usr/local/lib/python3.11/dist-packages (3.3.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.3)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.1)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.4)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly) (9.1.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.33.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n","Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n","Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.14.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n","Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n","Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n","Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n","Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n","Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n","Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n","Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai) (4.9.0)\n","Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai) (1.9.0)\n","Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from openai) (0.28.1)\n","Requirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai) (0.10.0)\n","Requirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from openai) (2.11.7)\n","Requirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai) (1.3.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk) (8.2.1)\n","Requirement already satisfied: pyphen in /usr/local/lib/python3.11/dist-packages (from textstat) (0.17.2)\n","Requirement already satisfied: cmudict in /usr/local/lib/python3.11/dist-packages (from textstat) (1.0.32)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from textstat) (75.2.0)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai) (3.10)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai) (2025.6.15)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai) (1.0.9)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.16.0)\n","Requirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (1.1.4)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.9.0->openai) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.9.0->openai) (2.33.2)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.9.0->openai) (0.4.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: importlib-metadata>=5 in /usr/local/lib/python3.11/dist-packages (from cmudict->textstat) (8.7.0)\n","Requirement already satisfied: importlib-resources>=5 in /usr/local/lib/python3.11/dist-packages (from cmudict->textstat) (6.5.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.4.0)\n","Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata>=5->cmudict->textstat) (3.23.0)\n"]},{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-99720ca5-1a0e-4454-a17d-329c6a026151\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-99720ca5-1a0e-4454-a17d-329c6a026151\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving ad_evaluation_with_labels_updated.xlsx to ad_evaluation_with_labels_updated (8).xlsx\n","Dataset Shape: (2189, 8)\n","\n","Column Names: ['Ad Text', 'Price', 'Images', 'Address', 'Interaction', 'Label', 'Fake', 'Reasons']\n","\n","First few rows:\n","=== DATASET OVERVIEW ===\n","Total records: 2189\n","Fake posts: 32\n","Non-fake posts: 2157\n","\n","=== LABEL DISTRIBUTION ===\n","Label\n","Legitimate    997\n","Suspicious    669\n","Uncertain     523\n","Name: count, dtype: int64\n","\n","=== FAKE DISTRIBUTION BY LABEL ===\n","Fake         No  Yes\n","Label               \n","Legitimate  997    0\n","Suspicious  637   32\n","Uncertain   523    0\n","=== INITIALIZING STATISTICAL WEIGHT LEARNING SYSTEM ===\n","=== TRAINING WITH STATISTICAL WEIGHTS ===\n","=== LEARNING WEIGHTS STATISTICALLY ===\n","=== EXTRACTING PATTERNS FROM REAL DATA ===\n","Extracted 35 patterns from data\n","\n","=== TOP 15 STATISTICALLY LEARNED WEIGHTS ===\n"," 1. disponibili         : 3.000\n"," 2. with                : 3.000\n"," 3. banned              : 3.000\n"," 4. their               : 3.000\n"," 5. along               : 3.000\n"," 6. posts               : 3.000\n"," 7. posted              : 3.000\n"," 8. group               : 3.000\n"," 9. month               : 3.000\n","10. milano              : 3.000\n","11. apartment           : 3.000\n","12. today               : 3.000\n","13. immediately         : 3.000\n","14. corso               : 3.000\n","15. removed             : 3.000\n","Training completed after 30 iterations\n","\n","=== GENERATING COMPLETE SYNTHETIC FAKE POSTS FROM SUSPICIOUS POSTS ===\n","=== ANALYZING SUSPICIOUS POSTS FOR TEMPLATE EXTRACTION ===\n","Found 582 suspicious/fake posts for template extraction\n","Extracted 582 post templates\n","=== GENERATING 75 COMPLETE SYNTHETIC FAKE POSTS ===\n","\n","=== SYNTHETIC FAKE POST QUALITY VALIDATION ===\n","Average text length: 364.1 characters\n","Average word count: 57.3 words\n","Sample original text length: 143\n","Unique addresses: 53\n","Unique prices: 71\n","Synthetic posts saved to 'synthetic_posts.xlsx'\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_06fab9b3-7942-4d02-aad7-b10c7292976e\", \"synthetic_posts.xlsx\", 19402)"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Generated 75 complete synthetic fake posts based on suspicious post templates\n","\n","=== ALL SYNTHETIC Fake POSTS (Generated from Suspicious Post Templates) ===\n","\n","=== SYNTHETIC Fake POST #1 ===\n","Ad Text: #cerco Studente di fisica al secondo anno di triennale, cerco stanza singola a partire da febbraio/marzo. Budget massimo 500€. Se ci sono opzioni contattatemi in privato. Grazie mille. today deal\n","Price: 388\n","Address: in privato\n","Interaction: 2 likes, 3 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #2 ===\n","Ad Text: 2 posti liberi in camera doppia disponibili subito, ingresso immediato con la firma del contratto. Solo per studenti. Centro città. Affitto posto letto: 300€/mese Posizione: Corso Milano 122 Spese aggiuntive: Condominio: 89€/mese Bollette: 20-30€/mese free cheap immediately euro\n","Price: 312\n","Address: CorSo Milano 122\n","Interaction: 1 likes\n","Reasons: The user who posted was banned and removed from the group along with their posts\n","\n","=== SYNTHETIC Fake POST #3 ===\n","Ad Text: #offro@AffittiPadova Si libera da gennaio stanza doppia in Portello per due ragazze. La mensilità è di 300€ + spese condominiali today whatsapp\n","Price: 288\n","Address: in Portello\n","Interaction: 2 comments \n","Reasons: No exact address; No Detailed information; No images; Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #4 ===\n","Ad Text: Ciao a tutti, sono Ilaria e ho 23 anni. Cerco una stanza singola a Padova a partire da marzo in zone centrali. Inizierò a lavorare in un'agenzia di comunicazione con un contratto di tre anni. immediately now free euro\n","Price: 306\n","Address: Cerco una stanza singola a\n","Interaction: 3 likes, 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #5 ===\n","Ad Text: Buongiorno, siamo due lavoratrici in cerca di un appartamento a Padova o zone limitrofe. Possibilmente con due stanze divise. now discount\n","Price: 463\n","Address: siamo due lavoratrici in cerca di un appartamento a\n","Interaction: 1 likes, 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #6 ===\n","Ad Text: Si libera due stanze in un appartamento vicino centro. immediately contact whatsapp today\n","Price: 345\n","Address: in un appartamento vicino centro\n","Interaction: 0 likes, 0 comments\n","Reasons: No price; No images; No detailed information; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #7 ===\n","Ad Text: Ciao a tutti, siamo due ragazzi al terzo anno di statistica, cerchiamo anche già a partire da marzo una stanza doppia oppure due singole. Contattatemi in privato. euro no images contact cheap\n","Price: 399\n","Address: in privato\n","Interaction: 1 likes, 6 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 3 commenters\n","\n","=== SYNTHETIC Fake POST #8 ===\n","Ad Text: #CERCO Ciao a tutti, sono Giulia, una studentessa al primo anno della triennale in scienze politiche, relazioni internazionali e diritti umani. -COSA CERCO: Una stanza singola -PERIODO: per ora 4 mesi , dall’ultima settimana di febbraio/prima settimana di marzo fino a fine giugno (con possibilità di estensione) -ZONA: Portello/Fiera, ma valuto qualsiasi zona purché sia ben collegata al polo universitario situato in Via Ugo Bassi! -REQUISITI FONDAMENTALI: pulizia, ordine e rispetto reciproco!🫶🏻 -CONTATTI: potete scrivermi su messenger, oppure su Instagram: Giiulixx, sono gradite foto e prezzo! Grazie a tutti🩷 immediately cheap\n","Price: 211\n","Address: in scienze politiche\n","Interaction: 5 likes, 3 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 3 commenters\n","\n","=== SYNTHETIC Fake POST #9 ===\n","Ad Text: Ciao, sono un giovane lavoratore di 30 anni in cerca di una stanza a Padova non lontano dalla stazione. Sono una persona seria e pulita asap contact free\n","Price: 252\n","Address: anni in cerca di una stanza a\n","Interaction: 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #10 ===\n","Ad Text: Cerco urgentemente trilocale per 2 lavoratori con contratto!! zone accessibili al centro today deal discount immediately\n","Price: 460\n","Address: No address\n","Interaction: 0 likes, 2 comments\n","Reasons: Looking for rent, No comments from suspicious user\n","\n","=== SYNTHETIC Fake POST #11 ===\n","Ad Text: versione italiana🇮🇹 #Offerta 🏡Un letto in una stanza doppia solo per ragazze è temporaneamente disponibile📆dal 17 marzo al 7 aprile. (ogni notte 10 euro inclusa) La casa si trova nel quartiere Mortise, molto pulita e tranquilla, con tutti i comfort. Per maggiori informazioni e foto, invia un messaggio su WhatsApp al 3298044894. English version🇬🇧 #Offer 🏡A bed in a double room only for girls is temporarily available 📆from March 17 to April 7. (Each night 10 euro included) The house is located in the Mortise neighborhood, very clean and quiet, with all the comforts. For more information and photos, send a message on WhatsApp to 3298044894. limited urgent contact\n","Price: 11\n","Address: in the Mortise neighborhood\n","Interaction: 2 likes, 2 comments\n","Reasons: Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #12 ===\n","Ad Text: Ciao tutti! Im a professional athlete and an engineering student with an 200-300euro.please citizenship I'm looking to rent an apartment/studio/1 bedroom in this area, around 800£ all included. Grazie 🫶😇 free call me\n","Price: 378\n","Address: bedroom in this\n","Interaction: 3 likes, 4 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 3 commenters\n","\n","=== SYNTHETIC Fake POST #13 ===\n","Ad Text: Ciao sono un giovane lavoratore di 24 anni,molto pulito,ordinato e soprattutto educato,ho già avuto esperienze di convivenza in altri contesti ,vi chiedo di contattarmi qualora ci fossero novità,vi ringrazio 3770991525 immediately contact free cheap\n","Price: 208\n","Address: in altri contesti\n","Interaction: 3 likes, 0 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #14 ===\n","Ad Text: Si libera da subito un posto letto in camera doppia (solo STUDENTI) in zona residenziale tranquilla (Via Cattaro): in prossimità di bar,ristoranti,farmacie e supermercati,fermata del bus,tutte nel range di 200m,mentre a 10 min scarsi di camminata si può raggiungere la fermata del tram. La casa si compone di altre due singole, due bagni, ampio salotto con televisore, sala da pranzo e cucina ben fornita (con friggitrice ad aria,piastra,macchina per il caffè,bollitore,lavastoviglie); la casa è dotata di climatizzatori sia nella camera che nelle zone comuni, di zona lavanderia con lavatrice e di un grande terrazzo e dispone inoltre di garage e parcheggio. Il costo di un posto letto è di 325 euro, compreso di spese condominiale, ma escluse utenze. Solo STUDENTI Contratto firmato con agenzia now no images cheap discount\n","Price: 282\n","Address: in zona residenziale tranquilla (Via Cattaro)\n","Interaction: 1 likes, 2 comments\n","Reasons: Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #15 ===\n","Ad Text: Affittasi camera da letto ampia e luminosa all' interno di appartamento completamente ristrutturato in edificio di pregio. Zona centrale, Corso Milano. Se interessati contattatemi in privato. Disponibilita' immediata. immediately no images free whatsapp\n","Price: 400\n","Address: Central area, Corso Milano\n","Interaction: 0 likes, 2 comments\n","Reasons: Has address; No images; No price; No detailed information; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #16 ===\n","Ad Text: 2 posti liberi in camera doppia disponibili subito, ingresso immediato con la firma del contratto. Solo per studenti. Centro città. Affitto posto letto: 300€/mese Posizione: Corso Milano 122 Spese aggiuntive: Condominio: 89€/mese Bollette: 20-30€/mese cheap now\n","Price: 281\n","Address: Corso Milano 122\n","Interaction: 2 likes, 0 comments\n","Reasons: The user who posted was banned and removed from the group along with their posts\n","\n","=== SYNTHETIC Fake POST #17 ===\n","Ad Text: Affitto due stanze zona tencarola appartamento nuovo 140mq spese utenze da dividere Solo studenti asap discount limited euro\n","Price: 313\n","Address: zona tencarola \n","Interaction: 0 likes, 2 comments\n","Reasons: No exact address; No Detailed information; No images; No price; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #18 ===\n","Ad Text: 2 posti liberi in camera doppia disponibili subito, ingresso immediato con la firma del contratto. Solo per studenti. Centro città. Affitto posto letto: 300€/mese Posizione: Corso Milano 122 Spese aggiuntive: Condominio: 89€/mese Bollette: 20-30€/mese urgent now today\n","Price: 315\n","Address: CorSo Milano 122\n","Interaction: 2 likes\n","Reasons: The user who posted was banned and removed from the group along with their posts\n","\n","=== SYNTHETIC Fake POST #19 ===\n","Ad Text: Buongiorno, sono uno studente magistrale di 25 anni che frequenterà la sede di ingegneria dell'università di Padova a partire da metà febbraio fino a fine luglio. Cerco una stanza singola, preferibilmente in zona Arcella e dintorni, avendo a disposizione un budget di €550 tutto incluso. Sono un ragazzo tranquillo e abituato a convivere con altre persone già da 5 anni, avendo frequentato l'università sempre da fuorisede. Il 5 e il 6 febbraio sarò di persona a Padova per visitare le stanze. Grazie e buona giornata a tutti. call me deal whatsapp euro\n","Price: 464\n","Address: Nne\n","Interaction: 1 comments \n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #20 ===\n","Ad Text: Buon pomeriggio, cerco stanza per due settimane. Dal 1 al 15 febbraio. Grazie deal call me\n","Price: 207\n","Address: No address\n","Interaction: 1 likes, 7 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 4 commenters\n","\n","=== SYNTHETIC Fake POST #21 ===\n","Ad Text: Affittasi stanza privata con bagno privato a Padova, completamente arredata e dotata di lavatrice. Situata vicino al Parco Iris, a un isolato dal supermercato Alì, e comoda per l’ospedale e la fermata dell’autobus. Per maggiori informazioni, contattami in privato now limited deal today\n","Price: 210\n","Address: al Parco Iris\n","Interaction: 1 likes\n","Reasons: Has address; No price; No images; No detailed information; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #22 ===\n","Ad Text: Ciao! Sono Matilde, ho 24 anni e a breve comincerò a lavorare come logopedista a Padova. Cerco una stanza singola, possibilmente in zona ospedali/portello o prato della valle. Grazie mille :) contact today\n","Price: 358\n","Address: a lavorare come logopedista a\n","Interaction: 0 likes, 4 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 3 commenters\n","\n","=== SYNTHETIC Fake POST #23 ===\n","Ad Text: Buon pomeriggio. Mi chiamo Raffaele, faccio l'insegnante a Padova. Cerco una stanza. Possibilmente Padova Sud o comunque facilmente raggiungibile. Grazie. deal limited free\n","Price: 233\n","Address: insegnante a\n","Interaction: 4 likes, 4 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #24 ===\n","Ad Text: ciao a tutt* 🧚✨ non pensavo avrei mai rimpianto l’essere fuoricorso ma la ricerca di una stanza a padova mi sta facendo pentire di aver trovato lavoro CERCO - stanza singola ad un prezzo decente, che visti gli affitti che girano a momenti mi compro uno chalet a cortina. mi fate felice se con spese incluse 🙂 - possibilmente zona con parcheggi e/o dove tangenziale sia facilmente accessibile per raggiungere SS516/via dei vivai con person* bell* e pulit* vanno bene anche gli animali, posso prendere gli antistaminici, purché loro e padron* siano antifascist*, antirazzist*, lgbtqia+ friendly e qualsiasi altra definizione che rientri nel senso comune e nel rispetto dei diritti umani scrivetemi grz! 📩 deal immediately now\n","Price: 397\n","Address: essere fuoricorso ma la ricerca di una stanza a\n","Interaction: 19 likes, 6 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 7 commenters\n","\n","=== SYNTHETIC Fake POST #25 ===\n","Ad Text: Disponibili da METÀ FEBBRAIO quattro stanze in appartamento in via Eulero, zona BRUSEGANA così composte: - Una camera **DOPPIA con bagno privato**: 290€ a posto letto - **due camere SINGOLE**: 350€ ciascuna - **un'ampia camera SINGOLA con letto matrimoniale**: 400€ Le utenze e le spese condominiali sono ESCLUSE. Ogni camera da letto è dotata di armadio e postazioni studio con scrivanie. A disposizione ampio soggiorno con angolo cottura con induzione e forno. L'appartamento ha due bagni, lavatrice, due balconi e anche un ampio garage. A tre minuti a piedi ci sono le fermate dell'autobus diretti per il centro e per gli istituti. A pochi minuti ci sono supermercati, negozi e farmacie, la zona è molto tranquilla e dotata di tutti i servizi. Se interessati, per dettagli e visitare l'appartamento, per cortesia inviare richieste alla mail eulero.home@gmail.com è gradita una presentazione. no images urgent asap\n","Price: 338\n","Address: Via Eulero\n","Interaction: 3 likes, 0 comments\n","Reasons: Low price; Less images; Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #26 ===\n","Ad Text: Buonasera. Cerco un'appartamento x una famiglia di quattro persone. Attualmente domiciliati in prato della valle, vogliamo allontanarci dal centro per motivi logistici e di carattere personale. Per info 3347007956 oppure 3207855849 🌈🌈🌈🌈🌈🌈🌈🌈🌈🌈🌈🌈🌈🌈🌈🌈 whatsapp asap today limited\n","Price: 361\n","Address: in prato della valle\n","Interaction: 10 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #27 ===\n","Ad Text: Ciao ! Sono uno studente francese, sono alla ricerca di uno appartamento o una camera singola per 4 mesi (Fino alla fine di luglio). Grazie today contact euro limited\n","Price: 408\n","Address: No address\n","Interaction: 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #28 ===\n","Ad Text: Ciao, sono Alessia, ho 20 anni e sono al secondo anno della triennale in economia. Cerco una stanza singola a partire da gennaio/febbraio/marzo in zona portello/stanga/centro, no arcella. Budget 400-500€. Se avete proposte scrivetemi pure ENGLISH Hi, I'm Alessia, I'm 20 years old and I'm in my second year of a Bachelor's in economics. I am looking for a single room starting from january/february/march in portello/stanga or in te city center, no arcella. Budget €400-500. If you have any suggestions, please write to me today cheap urgent limited\n","Price: 513\n","Address: in economia\n","Interaction: 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #29 ===\n","Ad Text: Ciao! #CERCO bilocale per 2 persone (lavoratori) in zona Forcellini/Facciolati/Santa Rita, a partire da marzo 2025. Grazie ☺️ whatsapp free urgent discount\n","Price: 491\n","Address: in zona Forcellini\n","Interaction: 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #30 ===\n","Ad Text: Ciao a tutti! Mi chiamo Anna e ho quasi 22 anni. Insieme alla mia amica Federica (20 anni) stiamo cercando una camera doppia oppure, meglio, due singole. Entrambe abbiamo già esperienza di convivenza. Io studio Fisica e lei Ingegneria Biomedica, quindi preferiremmo una soluzione centrale o massimo venti minuti a piedi dal Portello. Io sono disponibile anche da subito, lei da luglio. Se avete soluzioni da consigliarci, scrivetemi in privato. urgent call me\n","Price: 242\n","Address: in privato\n","Interaction: 5 likes, 14 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 8 commenters\n","\n","=== SYNTHETIC Fake POST #31 ===\n","Ad Text: Affittasi camera da letto ampia e luminosa all' interno di appartamento completamente ristrutturato in edificio di pregio. Zona centrale, Corso Milano. Se interessati contattatemi in privato. Disponibilita' immediata. immediately whatsapp\n","Price: 402\n","Address: Central area, Corso Milano\n","Interaction: 2 likes, 2 comments\n","Reasons: Has address; No images; No price; No detailed information; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #32 ===\n","Ad Text: Salve, cerco appartamento completamente arredato per 2 ragazzi con le seguenti caratteristiche: Cucina 2 camere da letto 1 o 2 bagni se possibile Garage. Siamo 2 ragazzi con lavoro regolare a tempo indeterminato. Zona PADOVA e limitrofi. No proposte ridicole con prezzi assurdi. discount today call me\n","Price: 246\n","Address: Zona\n","Interaction: 2 likes, 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #33 ===\n","Ad Text: Ciao! Siamo 3 ragazzi studenti del primo anno e stiamo cercando un coinquilino da aggiungere in una camera doppia, attualmente già occupata da uno di noi. L’appartamento, da poco interamente ristrutturato, è dotato di due bagni, lavatrice, 3 condizionatori, lavastoviglie e wifi; si trova in zona Stanga, a 5 minuti in bici dal portello. Il costo è di 300€ al mese piú bolletta dell’ elettricità. Disponibile da subito. free cheap asap\n","Price: 335\n","Address: in zona Stanga\n","Interaction: 2 likes, 3 comments\n","Reasons: Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #34 ===\n","Ad Text: Buonasera, sono Tornatore Luigi, un logopedista che si dovrebbe trasferire intorno alla seconda metà di gennaio a Padova per lavoro e per frequentare un master presso l'Unversità di Padova. Cerco un monolocale\\bilocale ad uso singolo con un budget di 600 euro o eventualmente una stanza in una casa condivisa, in zona centro storico- portello- prato della valle o in una zona ben collegata con il centro. Se qualcuno ha disponibilità o può darmi qualche consiglio, non esiti a contattarmi! Grazie in anticipo! asap deal urgent\n","Price: 635\n","Address: di gennaio a\n","Interaction: 0 likes, 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #35 ===\n","Ad Text: Buongiorno cerco stanza da condividere con sole ragazze, vicino Padova e dintorni..con spese incluse possibilmente asap immediately\n","Price: 288\n","Address: vicino\n","Interaction: 9 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #36 ===\n","Ad Text: buongiorno! si libera da inizio marzo un posto in una spaziosa camera doppia con terrazzo privato e letto a una piazza e mezza in un appartamento rimesso a nuovo quest'anno(serramenti, elettrodomestici, imbiancatura ecc.). L'appartamento si trova in una zona esattamente connessa e comoda a tutti i servizi: stazione dei treni, fermata del tram e a due minuti dal centro e molto vicino alle varie facoltà È relativamente grande, con due bagni, una cucina con tavolo da pranzo, divano e terrazzino in comune. È dotato di forno, forno a microonde, lavatrice, due frigoriferi. Per altre informazioni scrivetemi in privato! free whatsapp urgent call me\n","Price: 320\n","Address: No address\n","Interaction: 3 likes, 1 comments\n","Reasons: Has images; No address; No price; Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #37 ===\n","Ad Text: Buongiorno, sono un lavoratore dipendente con contratto di lavoro a tempo indeterminato cerco appartamento in zona Padova Ovest o province, il budget massimo è di 650 e 700. Se avete qualcosa non esitate a scrivermi. , Grazie. now today call me\n","Price: 214\n","Address: sono un lavoratore dipendente con contratto di lavoro a tempo indeterminato cerco appartamento in zona\n","Interaction: 1 likes, 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #38 ===\n","Ad Text: Buongiorno, dovrei accompagnare la mamma in ospedale a Padova, mi consigliate beb o hotel o appartamenti dove posso alloggiare nei pressi dell'azienda ospedaliera universitaria. GRAZIE discount limited\n","Price: 413\n","Address: dovrei accompagnare la mamma in ospedale a\n","Interaction: 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #39 ===\n","Ad Text: Ciao a tutti, sono una studentessa internazionale al primo anno di magistrale in scienze politiche. Cerco una stanza SINGOLA disponibile da subito o da gennaio con contratto regolare per gli studeni (anche' subentro, importante che ci sia il mio nome nel contratto). Sono una persona educata, tranquilla, ordinata e pulita. Parlo italiano. Se qualcuno ha delle stanze disponibili per favore scrivetemi in privato, grazie immediately today deal asap\n","Price: 343\n","Address: in scienze politiche\n","Interaction: 4 likes, 4 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #40 ===\n","Ad Text: Salve, Cerco stanza singola (valuto anche bagno privato) in zona Padova Ovest/Stazione/Limena, vicino a Kering Eyewear, per un affitto iniziale di 6 mesi dal 15 marzo(con possibilità di proroga). Scrivetemi nei commenti o in privato. Grazie! limited euro\n","Price: 317\n","Address: in zona\n","Interaction: 1 likes, 3 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #41 ===\n","Ad Text: Ciao! Sono una neolaureata in Architettura, già con esperienza di convivenza (in Italia e all'estero), e cerco una stanza a Padova a partire da gennaio per lavoro. Possibilmente camera singola (massimo 2 coinquilini) o monolocale con poco budget. Zona da definire, preferibile area est. Se sapete di qualcosa che si libera o anche di un contatto da poter girarmi, scrivetemi in dm! Grazie✨ now euro call me\n","Price: 315\n","Address: in Architettura\n","Interaction: 2 likes, 4 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #42 ===\n","Ad Text: Ciao a tutti, sono Ilaria e ho 23 anni. Cerco una stanza singola a Padova a partire da marzo in zone centrali. Inizierò a lavorare in un'agenzia di comunicazione con un contratto di tre anni. call me immediately free\n","Price: 499\n","Address: Cerco una stanza singola a\n","Interaction: 1 likes, 3 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #43 ===\n","Ad Text: #offro Posto letto in doppia, per studentessa italiana a Legnaro – 150€/mese Cerco qualcuno per il subentro immediato nel mio posto letto in una stanza doppia a Legnaro. Nella stanza è già presente una studentessa che frequenta il primo anno ad Agripolis. Sono disponibili anche biciclette per chi vuole usarle. 💰 Costo: 150€/mese (utenze a parte). 📍 Indirizzo: via Garibaldi, Legnaro. ⚠ Riservato a una studentessa italiana, sotto richiesta dei proprietari. 📅 Disponibile da subito. Per info, scrivimi in privato! asap contact deal\n","Price: 152\n","Address:  via Garibaldi 65, Legnaro\n","Interaction: 0 likes, 1 comments\n","Reasons: Low price; Has address; Detailed information; No images; Several posts; Contacted owner no reply\n","\n","=== SYNTHETIC Fake POST #44 ===\n","Ad Text: Ciao! Mi chiamo Elena ho 37 anni e sono una lavoratrice con contratto a tempo indeterminato. Sto cercando una stanza singola nelle zone ovest centro/nord di Padova. Ho con me due gattini che vorrei poter tenere se fosse possibile Ringrazio anticipatamente! euro immediately\n","Price: 456\n","Address: nord di\n","Interaction: 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #45 ===\n","Ad Text: #offro Posto letto in doppia, per studentessa a Legnaro – 150€/mese Cerco qualcuno per il subentro immediato nel mio posto letto in una stanza doppia a Legnaro. 💰 Costo: 150€/mese. Per info o dettagli, scrivimi in privato! today immediately\n","Price: 108\n","Address:  via Garibaldi 65, Legnaro\n","Interaction: 2 likes, 0 comments\n","Reasons: Low price; Has address; Detailed information; No images; Several posts; Contacted owner no reply\n","\n","=== SYNTHETIC Fake POST #46 ===\n","Ad Text: # CERCO Ciao a tutti, sono uno studente al secondo anno e cerco una stanza singola da febbraio/marzo. Budget sui 300€ mensili. Per altre info scrivetemi pure!☺️ free no images\n","Price: 251\n","Address: No address\n","Interaction: 1 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #47 ===\n","Ad Text: { ENGLISH VERSION IS WRITTEN BELOW } ITALIAN 🇮🇹: STAI CERCANDO DI AFFITTARE O CONDIVIDERE LA TUA STANZA? SEI AL MESSAGGIO GIUSTO 🙂 Ciao a tutti, sto cercando una camera singola o doppia da metà febbraio o marzo, ho scritto di me qui sotto Ciao a tutti, sto facendo la mia laurea all'Università di Padova, quindi sto cercando una camera singola o doppia in un appartamento per vivere da metà febbraio o marzo, preferibilmente non fuori città sarebbe meglio. Sono organizzato, pulito, rispettoso e una persona amichevole. Né fumo né bevo, ma se i miei coinquilini lo fanno, non ho problemi con questo. Inoltre ho esperienza di condivisione di un appartamento, specialmente con italiani, studenti internazionali e lavoratori, inoltre sono davvero un buon compagno di coinquilini come detto dai miei passati coinquilini. Sono una persona amichevole ed estroversa, ma allo stesso tempo rispetto la privacy degli altri e non li interrompo mai. Se il posto mi va bene dopo la visita, lo prenoterò per l'intero anno con contratto. Se conosci un buon posto per me, non esitare a scrivermi in privato. Grazie ~~~~~~~~~~~~~~~~~~~~~~~ English 🏴󠁧󠁢󠁥󠁮󠁧󠁿: ARE YOU LOOKING FOR RENTING OR SHARING YOUR ROOM? YOU ARE AT THE RIGHT MESSAGE 🙂 Hello everyone i am looking for a Single room or double room from mid February or march, i wrote about myself below Hello everyone, I am doing my degree in University of Padua, therefore I am looking for a single room or double room in a apartment to live from mid February or march, preferably not outside from the city would be best. I am organized, clean, respectful and a friendly person. Neither I smoke nor I drink, but if my flatmates do, I have no problems with that. also I have experience of sharing an apartment, specially with italians, international students and workers additionally I am really good flatmate companion as said by my past flatmates . I’m a friendly and outgoing person, but at the same time, I respect the privacy of other and never interrupt them. If the place suits me after the visit, I'll book it for entire year with contract. If you know a good place for me, don't hesitate to write me in private. Thankyou cheap whatsapp\n","Price: 344\n","Address: di\n","Interaction: 3 likes, 0 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #48 ===\n","Ad Text: #cerco Sono una ragazza che studia studi inglesi all'università di padova. Cerco urgentemente una stanza doppia. Per favore, mandami un messaggio se hai qualche suggerimento ...... I'm a girl studying English Studies at padova university. I'm urgently looking for a doppia room. please text me if you had any suggestions +393514669546 cheap discount whatsapp\n","Price: 435\n","Address: di\n","Interaction: 1 likes, 5 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 4 commenters\n","\n","=== SYNTHETIC Fake POST #49 ===\n","Ad Text: Buonasera. Ho disponibilità di affitti transitori a buon prezzo x studenti o lavoratori zona Sottomarina. Se siete interessati scrivetemi in msg. cheap limited contact today\n","Price: 477\n","Address: zona Sottomarina\n","Interaction: 4 comments\n","Reasons: No exact address; No Detailed information; No images; No price; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #50 ===\n","Ad Text: Buonasera, venerdì sarò a Padova per vedere alcuni appartamenti. Cerco una singola con costo dai 250 ai 400€ mensili. Chi può aiutarmi e può invitarmi sarò ben lieto di venire a visionare l’appartamento. Il mio numero: +39 3453909522 Saluti, grazie per la disponibilità Andrea euro contact immediately\n","Price: 396\n","Address: a\n","Interaction: 3 likes, 0 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #51 ===\n","Ad Text: Ciao a tutti☺️ siamo due ragazze che cercano due stanze in affitto a Padova. Siamo iscritte al master in ecocardiografia e resteremo a Padova per tutta la durata del tirocinio. Grazie! today whatsapp\n","Price: 434\n","Address: siamo due ragazze che cercano due stanze in affitto a\n","Interaction: 2 likes, 6 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 3 commenters\n","\n","=== SYNTHETIC Fake POST #52 ===\n","Ad Text: Starting from February 27th, a bright double room will be available in a modern apartment located on the second floor at Corso Milano 122. The apartment has a beautiful view of the park along Corso Milano, is fully furnished, and equipped with all necessary appliances. Rent: €420 (300 rent, 89 condominium, +-30 bills) per month / person Deposit: €800 free deal cheap contact\n","Price: 383\n","Address: at Corso Milano\n","Interaction: 0 likes, 1 comments\n","Reasons: The user who posted was banned and removed from the group along with their posts\n","\n","=== SYNTHETIC Fake POST #53 ===\n","Ad Text: Ciao a tutt*, sono Simone, uno studente del corso di Laurea Magistrale in Ingegneria Civile dell'università di Padova. Sono alla ricerca di una sistemazione per il periodo che va da Marzo a Luglio/Agosto 2025 poiché ho necessità di soggiornare a Padova per la scrittura della Tesi di Laurea. Cerco una camera SINGOLA (budget circa 400€ spese comprese) o un MONOLOCALE/BILOCALE (budget circa 600 euro spese comprese) , anche in subaffitto. Ho vissuto a Padova per due anni, sono una persona molto cordiale e socievole, rispettosa degli spazi e delle abitudini altrui. Per eventuali proposte non esitate a contattarmi. Buona giornata😁 discount limited immediately free\n","Price: 631\n","Address: in Ingegneria Civile dell\n","Interaction: 10 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 6 commenters\n","\n","=== SYNTHETIC Fake POST #54 ===\n","Ad Text: Salve, sono un Ingegnere informatico ed inizierò a lavorare in zona Stanga ad inizio Febbraio. Sono in cerca di un piccolo appartamento o un'ampia stanza singola, possibilmente in Zona Stanga o zone limitrofe. whatsapp immediately cheap discount\n","Price: 222\n","Address: in zona Stanga ad inizio Febbraio\n","Interaction: 3 likes, 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #55 ===\n","Ad Text: Disponibili da METÀ FEBBRAIO quattro stanze in appartamento in via Eulero, zona BRUSEGANA così composte: - Una camera **DOPPIA con bagno privato**: 290€ a posto letto - **due camere SINGOLE**: 350€ ciascuna - **un'ampia camera SINGOLA con letto matrimoniale**: 400€ Le utenze e le spese condominiali sono ESCLUSE. Ogni camera da letto è dotata di armadio e postazioni studio con scrivanie. A disposizione ampio soggiorno con angolo cottura con induzione e forno. L'appartamento ha due bagni, lavatrice, due balconi e anche un ampio garage. A tre minuti a piedi ci sono le fermate dell'autobus diretti per il centro e per gli istituti. A pochi minuti ci sono supermercati, negozi e farmacie, la zona è molto tranquilla e dotata di tutti i servizi. Se interessati, per dettagli e visitare l'appartamento, per cortesia inviare richieste alla mail eulero.home@gmail.com è gradita una presentazione. discount euro\n","Price: 313\n","Address: Via Eulero\n","Interaction: 3 likes, 2 comments\n","Reasons: Low price; Less images; Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #56 ===\n","Ad Text: Ciao a tutti/e. #Cerco stanza singola non troppo distante dal centro. Mi trasferisco per lavoro. Scrivetemi in privato se avete offerte, grazie. immediately free\n","Price: 325\n","Address: in privato se avete offerte\n","Interaction: 2 likes, 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #57 ===\n","Ad Text: In una casa autonoma nuova, immersa nel verde, vicina al centro, quartiere di San Paolo, ben collegato al centro città grazie alla vicina pista ciclabile e fermata dell'autobus, perfetto per raggiungere il centro città in bicicletta o con i mezzi pubblici. L'annuncio è rivolto a SOLE RAGAZZE (in dottorato, specializzazione, apprendistato...)di età vicina a quella delle altre 2 inquiline ( 30 anni ). Camera disponibile con BAGNO PRIVATO. Locazione a CANONE CONCORDATO. Canone di €440,00 + spese (circa €80,00 al mese, variabili in base ai consumi) no spese condominiali. Contratto di sei mesi ev rinnovabile. La casa è composta da 3 camere da letto (due già occupate) e 3 bagni, Cucina abitabile, attrezzata con forno, microonde e lavastoviglie, ampio salotto. Inoltre la casa dispone di lavatrice, smart tv, condizionatori in ogni stanza, impianto di riscaldamento a pavimento, tapparelle motorizzate-blindate, zanzariere. Ideale per chi cerca un ambiente silenzioso per studiare e lavorare. Per effettuare visite o informazioni scrivimi a silvia.ti@tin.it. RISPONDO SOLO VIA E MAIL. call me euro limited\n","Price: 258\n","Address: quartiere di San Paolo\n","Interaction: 1 likes\n","Reasons: Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #58 ===\n","Ad Text: Buongiorno, siamo 3 studenti dell’Università di Padova e staremmo cercando un 4 inquilino per una casa in zona Brusegana. Per qualsiasi informazione contattatemi pure call me whatsapp\n","Price: 257\n","Address: di\n","Interaction: 1 likes, 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #59 ===\n","Ad Text: #OFFRO ✨ SI LIBERA UN POSTO IN STANZA DOPPIA DALL'1 MARZO SOLO PER RAGAZZE IN VIA DEL PORTELLO 1✨ Si libera dall'1 marzo un posto in stanza doppia in un appartamento accogliente, situato in via del Portello 1, una zona universitaria perfetta per studentesse❗ Si trova a pochi minuti a piedi dalla maggior parte delle facoltà, con supermercato, fermate degli autobus e molti servizi e locali sotto casa. L'affitto è di 300€ al mese + 37.5€ di spese condominiali, comprendenti anche acqua e riscaldamento/aria condizionata. L'appartamento è composto da due stanze doppie, un bagno, soggiorno/cucina, attrezzati con anche: lavastoviglie, divano-letto e tv. La stanza è in condivisione con una studentessa di psicologia, socievole e rispettosa degli spazi comuni. Se interessati contattatemi in privato!📩 whatsapp limited call me\n","Price: 299\n","Address: IN VIA DEL PORTELLO 1\n","Interaction: 2 likes, 0 comments\n","Reasons: No images; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #60 ===\n","Ad Text: #offro Posto letto in doppia, per studentessa a Legnaro – 150€/mese Cerco qualcuno per il subentro immediato nel mio posto letto in una stanza doppia a Legnaro. 💰 Costo: 150€/mese. Per info o dettagli, scrivimi in privato! limited urgent\n","Price: 160\n","Address:  via Garibaldi 65, Legnaro\n","Interaction: 1 likes, 2 comments\n","Reasons: Low price; Has address; Detailed information; No images; Several posts; Contacted owner no reply\n","\n","=== SYNTHETIC Fake POST #61 ===\n","Ad Text: Ciao a tutti! Scrivo per conto del mio ragazzo che cerca due coinquilini per due camere singole in via San Giovanni di Verdara, in un ampio appartamento di 120mq con tre camere singole, soggiorno, cucina, due bagni, terrazzo, cantina e garage. Disponibili da subito. Se interessati contattatemi privatamente. no images limited free\n","Price: 357\n","Address: in Via San Giovanni di Verdara\n","Interaction: 5 likes, 6 comments\n","Reasons: Several different posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #62 ===\n","Ad Text: #OFFRO ✨ SI LIBERA UN POSTO IN STANZA DOPPIA DALL'1 MARZO SOLO PER RAGAZZE IN ZONA FIORE DI BOTTA✨ Si libera dall'1 marzo un posto in stanza doppia per ragazze in un appartamento accogliente, situato in via del Pescarotto. Si trova in zona fiore di botta, a pochi minuti a piedi dal portello. L'affitto è di 255€ al mese tutto incluso. L'appartamento è composto da due stanze doppie, due bagni e soggiorno/cucina. Se interessati contattatemi in privato con una breve presentazione! ☺️📩 free limited urgent whatsapp\n","Price: 350\n","Address: IN VIA DEL PORTELLO 1\n","Interaction: 1 comments \n","Reasons: No images; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #63 ===\n","Ad Text: Salve cerco di una stanza in affitto a Padova,non fumo non bevo cmq ho trovato tanti lavori li però mi riesco a trovare una stanza immediately today cheap contact\n","Price: 495\n","Address: No address\n","Interaction: 2 likes, 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #64 ===\n","Ad Text: #OFFRO 🚨⚠️ POSTO IN DOPPIA PER RAGAZZA ⚠️🚨 Si libera da subito un posto in doppia. NO ERASMUS (Per il volere del proprietario) €200 affitto + €60 spese condominiali + €15-20 di bollette bimensili = €275-280 TOTALE Se siete interessati, scrivetemi pure! whatsapp call me immediately today\n","Price: 260\n","Address: No address\n","Interaction: 3 likes, 2 comments\n","Reasons: No address; less images; Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #65 ===\n","Ad Text: Buongiorno, sono un medico specializzando e cerco stanza/casa in affitto a partire da Febbraio. Qualcuno riesce ad aiutarmi? today euro call me\n","Price: 492\n","Address: in affitto a partire da Febbraio\n","Interaction: 4 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 3 commenters\n","\n","=== SYNTHETIC Fake POST #66 ===\n","Ad Text: Hello everyone! My name is Ana (33), and I’ll be moving to Padua in February for a predoctoral stay at UNIPD. I’m looking for a shared apartment starting in February or, at the latest, March, and I’ll need it until mid-June. I’ve lived in various places and have plenty of experience with shared living arrangements. I would be truly grateful if you could tell me if anything is available. Thank you so much! 🙂 no images euro\n","Price: 356\n","Address: in February for a predoctoral stay at UNIPD\n","Interaction: 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #67 ===\n","Ad Text: ⚠️URGENTISSIMO⚠️ Ciao, La mia amica si trasferisce da me e stiamo cercando una sostituta STUDENTESSA/LAVORATRICE DONNA per la sua splendida doppia in centro a padova,Galleria Tito Livio 8. La stanza è 320€ incluse spese condominiali e riscaldamento. Lei si trasferirá da me il 31 marzo quindi scrivetemi per il suo contatto e maggiori informazioni grazie🖤 whatsapp now\n","Price: 314\n","Address: in the center of Padua, Galleria Tito Livio 8\n","Interaction: 1 likes\n","Reasons: No images; No detailed information with urgency; Contacted owner \n","\n","=== SYNTHETIC Fake POST #68 ===\n","Ad Text: Ciao cerco affito monolocale Padova! euro whatsapp contact no images\n","Price: 285\n","Address: Ciao cerco affito monolocale\n","Interaction: 2 likes, 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #69 ===\n","Ad Text: Disponibile in via Eulero, Padova zona Brusegana, una camera **DOPPIA con bagno privato**: 290€ a posto letto Le utenze e le spese condominiali sono escluse. La camera da letto è dotata di armadio e postazione studio con scrivania. A disposizione ampio soggiorno con angolo cottura con induzione e forno. L'appartamento ha, lavatrice, due terrazzi e anche un ampio garage. A tre minuti a piedi ci sono le fermate dell'autobus diretti per il centro e per gli istituti. A pochi minuti ci sono supermercati, negozi e farmacie, la zona è molto tranquilla e dotata di tutti i servizi. Se interessati, per dettagli e visitare l'appartamento, per cortesia inviare richieste alla mail eulero.home@gmail.com è gradita una presentazione. deal today\n","Price: 288\n","Address: Via Eulero\n","Interaction: 1 likes, 2 comments\n","Reasons: Low price; Less images; Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #70 ===\n","Ad Text: rent or subrent in legnaro, double room, only for boys, near agripolis, 200 rent more information text me whats app 3514810678 call me today no images euro\n","Price: 220\n","Address: in legnaro\n","Interaction: 1 likes, 0 comments\n","Reasons: No exact address; No images; No detailed information; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #71 ===\n","Ad Text: versione italiana🇮🇹 #Offerta 🏡Un letto in una stanza doppia solo per ragazze è temporaneamente disponibile📆dal 16 marzo al 7 Maggio. (ogni notte 10 euro inclusa) La casa si trova nel quartiere Mortise, molto pulita e tranquilla, con tutti i comfort. Per maggiori informazioni e foto, invia un messaggio su WhatsApp al 3298044894. Telegram: @shaya_tvk English version🇬🇧 #Offer 🏡A bed in a double room only for girls is temporarily available 📆from March 16 to May 7. (Each night 10 euro included) The house is located in the Mortise neighborhood, very clean and quiet, with all the comforts. For more information and photos, send a message on WhatsApp to 3298044894. Telegram: @shaya_tvk no images immediately\n","Price: -28\n","Address: in the Mortise neighborhood\n","Interaction: 1 likes, 1 comments\n","Reasons: Several posts; Suspicious user activity; Contacted owner\n","\n","=== SYNTHETIC Fake POST #72 ===\n","Ad Text: Ciao! Siamo una coppia di lavoratori che stiamo cercando appartamento a Padova o limitrofe, preferibilmente prima periferia sud est, per trasferire da subito, grazie. today urgent limited call me\n","Price: 229\n","Address: Siamo una coppia di lavoratori che stiamo cercando appartamento a\n","Interaction: 3 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 3 commenters\n","\n","=== SYNTHETIC Fake POST #73 ===\n","Ad Text: Ciao! Un'atra studentessa francese e io stiamo cercando 2 stanze ( non condivise!!)in un appartamento per il prossimo semestre universitario!! Budget max 500/550€ a testa con le spese!!! Vi ringraziamo per l'aiuto:)) free now immediately\n","Price: 366\n","Address: No address\n","Interaction: 1 likes, 2 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 2 commenters\n","\n","=== SYNTHETIC Fake POST #74 ===\n","Ad Text: Ciao cerco affito monolocale Padova! discount contact\n","Price: 259\n","Address: Ciao cerco affito monolocale\n","Interaction: 4 likes, 3 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","=== SYNTHETIC Fake POST #75 ===\n","Ad Text: Ciao a tutti! Cerco monolocale qui a Padova, sono una lavoratrice in ambito riabilitativo. Zona molto variabile in quanto automunita. Grazie 🙏 cheap euro no images\n","Price: 405\n","Address: Cerco monolocale qui a\n","Interaction: 0 likes, 0 comments\n","Reasons: Looking for rent, Has comments from suspicious users, Contacted to 1 commenters\n","\n","Original dataset size: 2189\n","Augmented dataset size: 2264\n","Fake posts in original: 32\n","Fake posts in augmented: 107\n","Evaluating Enhanced LLM (Statistical Weights) on Original Data...\n","Evaluating Enhanced LLM (Statistical Weights) on Augmented Data...\n","Training RF on Original Data...\n","Training RF on Augmented Data...\n","\n","=== MODEL PERFORMANCE RESULTS ===\n","                             Model  Recall (TPR)       FPR\n","0  Enhanced LLM Statistical (Orig)      0.968750  0.253593\n","1   Enhanced LLM Statistical (Aug)      0.934579  0.253593\n","2                        RF (Orig)      0.718750  0.372276\n","3                         RF (Aug)      0.448598  0.404729\n","\n","=== SAMPLE REASONING WITH STATISTICAL WEIGHTS ===\n","• Pattern 'user' detected (weight: +0.730)\n","• Pattern 'urgent' detected (weight: +0.190)\n","• Pattern 'from' detected (weight: +0.730)\n","• Pattern 'images' detected (weight: +0.820)\n","• Pattern 'person' detected (weight: +0.100)\n","TOTAL SCORE: 2.57 / 20.67 = 0.124\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"8709bd07-d588-4988-a615-735acb209380\" class=\"plotly-graph-div\" style=\"height:500px; width:1000px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"8709bd07-d588-4988-a615-735acb209380\")) {                    Plotly.newPlot(                        \"8709bd07-d588-4988-a615-735acb209380\",                        [{\"marker\":{\"color\":\"#2ca02c\"},\"x\":[\"Enhanced LLM Statistical (Orig)\",\"Enhanced LLM Statistical (Aug)\",\"RF (Orig)\",\"RF (Aug)\"],\"y\":[0.96875,0.9345794392523364,0.71875,0.4485981308411215],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"marker\":{\"color\":\"#d62728\"},\"x\":[\"Enhanced LLM Statistical (Orig)\",\"Enhanced LLM Statistical (Aug)\",\"RF (Orig)\",\"RF (Aug)\"],\"y\":[0.253592953175707,0.253592953175707,0.3722763096893834,0.4047287899860918],\"type\":\"bar\",\"xaxis\":\"x2\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.45]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"range\":[0,1]},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.55,1.0]},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.0,1.0],\"range\":[0,1]},\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"Recall (TPR) Comparison\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"FPR Comparison\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"title\":{\"text\":\"Enhanced Model Performance Comparison\",\"x\":0.5},\"height\":500,\"width\":1000,\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('8709bd07-d588-4988-a615-735acb209380');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"8c0a538f-d2f2-4cb8-aa85-ed2b27f8c251\" class=\"plotly-graph-div\" style=\"height:500px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"8c0a538f-d2f2-4cb8-aa85-ed2b27f8c251\")) {                    Plotly.newPlot(                        \"8c0a538f-d2f2-4cb8-aa85-ed2b27f8c251\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Fake=No\\u003cbr\\u003eDataset=%{x}\\u003cbr\\u003eCount=%{text}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"No\",\"marker\":{\"color\":\"green\",\"pattern\":{\"shape\":\"\"}},\"name\":\"No\",\"offsetgroup\":\"No\",\"orientation\":\"v\",\"showlegend\":true,\"text\":[2157.0,2157.0],\"textposition\":\"outside\",\"x\":[\"Original\",\"Augmented (Complete Synthetic)\"],\"xaxis\":\"x\",\"y\":[2157,2157],\"yaxis\":\"y\",\"type\":\"bar\",\"texttemplate\":\"%{text}\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Fake=Yes\\u003cbr\\u003eDataset=%{x}\\u003cbr\\u003eCount=%{text}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Yes\",\"marker\":{\"color\":\"red\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Yes\",\"offsetgroup\":\"Yes\",\"orientation\":\"v\",\"showlegend\":true,\"text\":[32.0,107.0],\"textposition\":\"outside\",\"x\":[\"Original\",\"Augmented (Complete Synthetic)\"],\"xaxis\":\"x\",\"y\":[32,107],\"yaxis\":\"y\",\"type\":\"bar\",\"texttemplate\":\"%{text}\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Dataset\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Count\"}},\"legend\":{\"title\":{\"text\":\"Fake\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Fake Post Distribution\"},\"barmode\":\"group\",\"height\":500,\"width\":800},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('8c0a538f-d2f2-4cb8-aa85-ed2b27f8c251');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"05940c1b-d784-4b53-9c61-5c7ec8da49d3\" class=\"plotly-graph-div\" style=\"height:500px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"05940c1b-d784-4b53-9c61-5c7ec8da49d3\")) {                    Plotly.newPlot(                        \"05940c1b-d784-4b53-9c61-5c7ec8da49d3\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Label=Legitimate\\u003cbr\\u003eDataset=%{x}\\u003cbr\\u003eCount=%{text}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Legitimate\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Legitimate\",\"offsetgroup\":\"Legitimate\",\"orientation\":\"v\",\"showlegend\":true,\"text\":[997.0,997.0],\"textposition\":\"outside\",\"x\":[\"Original\",\"Augmented\"],\"xaxis\":\"x\",\"y\":[997,997],\"yaxis\":\"y\",\"type\":\"bar\",\"texttemplate\":\"%{text}\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Label=Suspicious\\u003cbr\\u003eDataset=%{x}\\u003cbr\\u003eCount=%{text}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Suspicious\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Suspicious\",\"offsetgroup\":\"Suspicious\",\"orientation\":\"v\",\"showlegend\":true,\"text\":[669.0,744.0],\"textposition\":\"outside\",\"x\":[\"Original\",\"Augmented\"],\"xaxis\":\"x\",\"y\":[669,744],\"yaxis\":\"y\",\"type\":\"bar\",\"texttemplate\":\"%{text}\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Label=Uncertain\\u003cbr\\u003eDataset=%{x}\\u003cbr\\u003eCount=%{text}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Uncertain\",\"marker\":{\"color\":\"#00cc96\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Uncertain\",\"offsetgroup\":\"Uncertain\",\"orientation\":\"v\",\"showlegend\":true,\"text\":[523.0,523.0],\"textposition\":\"outside\",\"x\":[\"Original\",\"Augmented\"],\"xaxis\":\"x\",\"y\":[523,523],\"yaxis\":\"y\",\"type\":\"bar\",\"texttemplate\":\"%{text}\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Dataset\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Count\"}},\"legend\":{\"title\":{\"text\":\"Label\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Label Distribution\"},\"barmode\":\"group\",\"height\":500,\"width\":800},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('05940c1b-d784-4b53-9c61-5c7ec8da49d3');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"9bbb777c-f86f-4733-8ef4-281ea9329583\" class=\"plotly-graph-div\" style=\"height:800px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9bbb777c-f86f-4733-8ef4-281ea9329583\")) {                    Plotly.newPlot(                        \"9bbb777c-f86f-4733-8ef4-281ea9329583\",                        [{\"colorscale\":[[0.0,\"rgb(247,251,255)\"],[0.125,\"rgb(222,235,247)\"],[0.25,\"rgb(198,219,239)\"],[0.375,\"rgb(158,202,225)\"],[0.5,\"rgb(107,174,214)\"],[0.625,\"rgb(66,146,198)\"],[0.75,\"rgb(33,113,181)\"],[0.875,\"rgb(8,81,156)\"],[1.0,\"rgb(8,48,107)\"]],\"showscale\":false,\"text\":[[1610,547],[1,31]],\"texttemplate\":\"%{text}\",\"x\":[\"Not Fake\",\"Fake\"],\"y\":[\"Not Fake\",\"Fake\"],\"z\":[[1610,547],[1,31]],\"type\":\"heatmap\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"colorscale\":[[0.0,\"rgb(247,251,255)\"],[0.125,\"rgb(222,235,247)\"],[0.25,\"rgb(198,219,239)\"],[0.375,\"rgb(158,202,225)\"],[0.5,\"rgb(107,174,214)\"],[0.625,\"rgb(66,146,198)\"],[0.75,\"rgb(33,113,181)\"],[0.875,\"rgb(8,81,156)\"],[1.0,\"rgb(8,48,107)\"]],\"showscale\":false,\"text\":[[1610,547],[7,100]],\"texttemplate\":\"%{text}\",\"x\":[\"Not Fake\",\"Fake\"],\"y\":[\"Not Fake\",\"Fake\"],\"z\":[[1610,547],[7,100]],\"type\":\"heatmap\",\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"colorscale\":[[0.0,\"rgb(247,251,255)\"],[0.125,\"rgb(222,235,247)\"],[0.25,\"rgb(198,219,239)\"],[0.375,\"rgb(158,202,225)\"],[0.5,\"rgb(107,174,214)\"],[0.625,\"rgb(66,146,198)\"],[0.75,\"rgb(33,113,181)\"],[0.875,\"rgb(8,81,156)\"],[1.0,\"rgb(8,48,107)\"]],\"showscale\":false,\"text\":[[1327,830],[12,20]],\"texttemplate\":\"%{text}\",\"x\":[\"Not Fake\",\"Fake\"],\"y\":[\"Not Fake\",\"Fake\"],\"z\":[[1327,830],[12,20]],\"type\":\"heatmap\",\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"colorscale\":[[0.0,\"rgb(247,251,255)\"],[0.125,\"rgb(222,235,247)\"],[0.25,\"rgb(198,219,239)\"],[0.375,\"rgb(158,202,225)\"],[0.5,\"rgb(107,174,214)\"],[0.625,\"rgb(66,146,198)\"],[0.75,\"rgb(33,113,181)\"],[0.875,\"rgb(8,81,156)\"],[1.0,\"rgb(8,48,107)\"]],\"showscale\":false,\"text\":[[1365,792],[55,52]],\"texttemplate\":\"%{text}\",\"x\":[\"Not Fake\",\"Fake\"],\"y\":[\"Not Fake\",\"Fake\"],\"z\":[[1365,792],[55,52]],\"type\":\"heatmap\",\"xaxis\":\"x4\",\"yaxis\":\"y4\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.45]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.625,1.0]},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.55,1.0]},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.625,1.0]},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.0,0.45]},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.0,0.375]},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.55,1.0]},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.0,0.375]},\"annotations\":[{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"LLM Orig\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"LLM Aug\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"RF Orig\",\"x\":0.225,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.375,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":16},\"showarrow\":false,\"text\":\"RF Aug\",\"x\":0.775,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.375,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"title\":{\"text\":\"Confusion Matrices\",\"x\":0.5},\"height\":800,\"width\":800},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('9bbb777c-f86f-4733-8ef4-281ea9329583');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"1ff6af4f-6e85-45f3-8b4c-35ab984ca1b1\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1ff6af4f-6e85-45f3-8b4c-35ab984ca1b1\")) {                    Plotly.newPlot(                        \"1ff6af4f-6e85-45f3-8b4c-35ab984ca1b1\",                        [{\"cells\":{\"align\":\"center\",\"fill\":{\"color\":\"lavender\"},\"format\":[null,\".3f\",\".3f\"],\"values\":[[\"Enhanced LLM Statistical (Orig)\",\"Enhanced LLM Statistical (Aug)\",\"RF (Orig)\",\"RF (Aug)\"],[0.96875,0.9345794392523364,0.71875,0.4485981308411215],[0.253592953175707,0.253592953175707,0.3722763096893834,0.4047287899860918]]},\"header\":{\"align\":\"center\",\"fill\":{\"color\":\"#1f77b4\"},\"font\":{\"color\":\"white\",\"size\":12},\"values\":[\"Model\",\"Recall (TPR)\",\"FPR\"]},\"type\":\"table\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Model Performance Comparison\",\"x\":0.5}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('1ff6af4f-6e85-45f3-8b4c-35ab984ca1b1');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["# Install required packages\n","!pip install pandas numpy scikit-learn matplotlib seaborn plotly transformers torch openai xlrd faker nltk textstat vaderSentiment\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px\n","import plotly.graph_objects as go\n","from plotly.subplots import make_subplots\n","from sklearn.model_selection import train_test_split, StratifiedKFold\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics import precision_score, recall_score, confusion_matrix\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.linear_model import LogisticRegression\n","from scipy.stats import chi2_contingency, pointbiserialr\n","from faker import Faker\n","import re\n","import warnings\n","import nltk\n","from nltk.corpus import stopwords\n","import textstat\n","import random\n","from collections import Counter, defaultdict\n","from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","\n","nltk.download('stopwords')\n","warnings.filterwarnings('ignore')\n","\n","# Set style for plots\n","plt.style.use('seaborn-v0_8')\n","sns.set_palette(\"husl\")\n","\n","# Upload Excel file first\n","from google.colab import files\n","uploaded = files.upload()\n","\n","# Load dataset\n","file_name = list(uploaded.keys())[0]\n","df = pd.read_excel(file_name, usecols=['Ad Text', 'Price', 'Images', 'Address', 'Interaction', 'Label', 'Fake', 'Reasons'])\n","\n","print(\"Dataset Shape:\", df.shape)\n","print(\"\\nColumn Names:\", df.columns.tolist())\n","print(\"\\nFirst few rows:\")\n","df.head()\n","\n","# Data Exploration and Preprocessing\n","def explore_data(df):\n","    \"\"\"Comprehensive data exploration\"\"\"\n","    print(\"=== DATASET OVERVIEW ===\")\n","    print(f\"Total records: {len(df)}\")\n","    print(f\"Fake posts: {len(df[df['Fake'] == 'Yes'])}\")\n","    print(f\"Non-fake posts: {len(df[df['Fake'] == 'No'])}\")\n","\n","    print(\"\\n=== LABEL DISTRIBUTION ===\")\n","    print(df['Label'].value_counts())\n","\n","    print(\"\\n=== FAKE DISTRIBUTION BY LABEL ===\")\n","    fake_by_label = pd.crosstab(df['Label'], df['Fake'])\n","    print(fake_by_label)\n","    return fake_by_label\n","\n","def preprocess_data(df):\n","    \"\"\"Clean and prepare the dataset\"\"\"\n","    df = df.copy()\n","    df['Ad Text'] = df['Ad Text'].fillna('')\n","    df['Price'] = df['Price'].fillna('No price')\n","    df['Images'] = df['Images'].fillna(0).astype(int)\n","    df['Address'] = df['Address'].fillna('No address')\n","    df['Interaction'] = df['Interaction'].fillna('No interaction')\n","    df['Label'] = df['Label'].fillna('Uncertain')\n","    df['Fake'] = df['Fake'].fillna('No')\n","    df['Reasons'] = df['Reasons'].fillna('')\n","\n","    df['Full_Text'] = (df['Ad Text'].astype(str) + \" \" +\n","                       df['Price'].astype(str) + \" \" +\n","                       df['Images'].astype(str) + \" images \" +\n","                       df['Address'].astype(str) + \" \" +\n","                       df['Interaction'].astype(str) + \" \" +\n","                       df['Reasons'].astype(str))\n","\n","    df['Fake_Binary'] = (df['Fake'] == 'Yes').astype(int)\n","    return df\n","\n","fake_by_label = explore_data(df)\n","df_processed = preprocess_data(df)\n","\n","#Statistical Weight Learning System\n","class StatisticalWeightLearner:\n","    \"\"\"Statistical weight learning system - eliminates manual weight assignment\"\"\"\n","\n","    def __init__(self):\n","        self.pattern_weights = {}\n","        self.feature_importance = {}\n","        self.learning_methods = ['correlation', 'chi_square', 'information_gain', 'random_forest']\n","        self.contextual_patterns = ['urgent', 'immediately', 'asap', 'cheap', 'euro', 'no images', 'contact', 'whatsapp',\n","                                   'limited', 'deal', 'discount', 'free', 'today', 'now', 'call me']\n","\n","    def extract_patterns_from_data(self, df):\n","        print(\"=== EXTRACTING PATTERNS FROM REAL DATA ===\")\n","        fake_posts = df[df['Fake_Binary'] == 1]['Full_Text'].str.lower()\n","        fake_term_counts = Counter([word for text in fake_posts for word in str(text).split() if len(word) > 3])\n","        top_fake_terms = [term for term, _ in fake_term_counts.most_common(20)]\n","\n","        all_patterns = list(set(top_fake_terms + self.contextual_patterns))\n","        print(f\"Extracted {len(all_patterns)} patterns from data\")\n","        return all_patterns\n","\n","    def learn_statistical_weights(self, df):\n","        \"\"\"Learn statistical weights for patterns based on multiple methods\"\"\"\n","        print(\"=== LEARNING WEIGHTS STATISTICALLY ===\")\n","        patterns = self.extract_patterns_from_data(df)\n","        correlation_weights = self._calculate_correlation_weights(df, patterns)\n","        chi_square_weights = self._calculate_chi_square_weights(df, patterns)\n","        info_gain_weights = self._calculate_information_gain(df, patterns)\n","        rf_weights = self._calculate_rf_importance(df, patterns)\n","\n","        self.pattern_weights = self._ensemble_weight_combination(correlation_weights, chi_square_weights, info_gain_weights, rf_weights)\n","        self._print_learned_weights()\n","        return self.pattern_weights\n","\n","    def _calculate_correlation_weights(self, df, patterns):\n","        weights = {}\n","        for pattern in patterns:\n","            df[f'has_{pattern}'] = df['Full_Text'].str.lower().str.contains(pattern, na=False).astype(int)\n","            if df[f'has_{pattern}'].sum() > 0:\n","                try:\n","                    correlation, p_value = pointbiserialr(df[f'has_{pattern}'], df['Fake_Binary'])\n","                    weights[pattern] = abs(correlation) * 3 if p_value < 0.05 else 0.1\n","                except: weights[pattern] = 0.1\n","        return weights\n","\n","    def _calculate_chi_square_weights(self, df, patterns):\n","        weights = {}\n","        for pattern in patterns:\n","            df[f'has_{pattern}'] = df['Full_Text'].str.lower().str.contains(pattern, na=False).astype(int)\n","            try:\n","                contingency = pd.crosstab(df[f'has_{pattern}'], df['Fake_Binary'])\n","                if contingency.shape == (2, 2):\n","                    chi2, p_value, _, _ = chi2_contingency(contingency)\n","                    weights[pattern] = (chi2 / 10) if p_value < 0.05 else 0.1\n","            except: weights[pattern] = 0.1\n","        return weights\n","\n","    def _calculate_information_gain(self, df, patterns):\n","        def entropy(labels): return -np.sum([p * np.log2(p + 1e-10) for p in np.bincount(labels) / len(labels)])\n","        weights = {}\n","        total_entropy = entropy(df['Fake_Binary'])\n","        for pattern in patterns:\n","            df[f'has_{pattern}'] = df['Full_Text'].str.lower().str.contains(pattern, na=False).astype(int)\n","            weighted_entropy = sum(len(df[df[f'has_{pattern}'] == v]) / len(df) * entropy(df[df[f'has_{pattern}'] == v]['Fake_Binary']) for v in [0, 1] if len(df[df[f'has_{pattern}'] == v]) > 0)\n","            info_gain = total_entropy - weighted_entropy\n","            weights[pattern] = max(info_gain * 5, 0.1)\n","        return weights\n","\n","    def _calculate_rf_importance(self, df, patterns):\n","        weights = {}\n","        try:\n","            feature_matrix = np.array([[int(pattern in str(text).lower()) for pattern in patterns] for text in df['Full_Text']])\n","            rf = RandomForestClassifier(n_estimators=100, random_state=42)\n","            rf.fit(feature_matrix, df['Fake_Binary'])\n","            weights = dict(zip(patterns, rf.feature_importances_ * 5))\n","        except: weights = {pattern: 1.0 for pattern in patterns}\n","        return weights\n","\n","    def _ensemble_weight_combination(self, corr_w, chi_w, ig_w, rf_w):\n","        combined_weights = {}\n","        all_patterns = set(corr_w) | set(chi_w) | set(ig_w) | set(rf_w)\n","        for pattern in all_patterns:\n","            weight = (0.30 * corr_w.get(pattern, 0.1) + 0.25 * chi_w.get(pattern, 0.1) + 0.25 * ig_w.get(pattern, 0.1) + 0.20 * rf_w.get(pattern, 0.1))\n","            combined_weights[pattern] = max(0.1, min(3.0, weight))\n","        return combined_weights\n","\n","    def _print_learned_weights(self):\n","        print(\"\\n=== TOP 15 STATISTICALLY LEARNED WEIGHTS ===\")\n","        sorted_weights = sorted(self.pattern_weights.items(), key=lambda x: x[1], reverse=True)[:15]\n","        for i, (pattern, weight) in enumerate(sorted_weights):\n","            print(f\"{i+1:2d}. {pattern:20}: {weight:.3f}\")\n","\n","#Complete Synthetic Fake Post Generator from Suspicious Posts\n","class CompleteSyntheticPostGenerator:\n","    \"\"\"Generate complete, realistic synthetic fake posts preserving structure and semantics\"\"\"\n","\n","    def __init__(self, weight_learner):\n","        self.suspicious_post_templates = []\n","        self.vocabulary_patterns = defaultdict(list)\n","        self.fake = Faker()  # Initialize Faker as an instance variable\n","        self.weight_learner = weight_learner  # Reference to StatisticalWeightLearner\n","\n","    def analyze_suspicious_posts(self, df):\n","        print(\"=== ANALYZING SUSPICIOUS POSTS FOR TEMPLATE EXTRACTION ===\")\n","        suspicious_posts = df[df['Label'] == 'Suspicious']\n","        fake_posts = df[df['Fake'] == 'Yes']\n","        source_posts = pd.concat([suspicious_posts, fake_posts]).drop_duplicates()\n","        print(f\"Found {len(source_posts)} suspicious/fake posts for template extraction\")\n","\n","        for _, post in source_posts.iterrows():\n","            template = {\n","                'ad_text': str(post['Ad Text']),\n","                'price': str(post['Price']),\n","                'images': int(post['Images']) if pd.notna(post['Images']) else 0,\n","                'address': str(post['Address']),\n","                'interaction': str(post['Interaction']),\n","                'reasons': str(post['Reasons']),\n","                'structure': ' '.join(str(post['Ad Text']).split()[:5]) if len(str(post['Ad Text']).split()) > 5 else str(post['Ad Text'])\n","            }\n","            self.suspicious_post_templates.append(template)\n","            self._extract_vocabulary_patterns(post)\n","\n","        print(f\"Extracted {len(self.suspicious_post_templates)} post templates\")\n","        return self.suspicious_post_templates\n","\n","    def _extract_vocabulary_patterns(self, post):\n","        text = str(post['Ad Text']).lower().split()\n","        for word in text:\n","            if any(urgent in word for urgent in ['urgent', 'immediately', 'asap']):\n","                self.vocabulary_patterns['urgency'].append(word)\n","            elif any(price in word for price in ['cheap', 'euro', 'price']):\n","                self.vocabulary_patterns['pricing'].append(word)\n","            elif any(contact in word for contact in ['contact', 'call', 'whatsapp']):\n","                self.vocabulary_patterns['contact'].append(word)\n","            elif any(quality in word for quality in ['perfect', 'amazing', 'best']):\n","                self.vocabulary_patterns['quality'].append(word)\n","        for key in self.vocabulary_patterns:\n","            self.vocabulary_patterns[key] = list(set(self.vocabulary_patterns[key]))[:15]\n","\n","    def generate_complete_synthetic_posts(self, n_samples=100):\n","        print(f\"=== GENERATING {n_samples} COMPLETE SYNTHETIC FAKE POSTS ===\")\n","        if not self.suspicious_post_templates:\n","            return self._generate_default_posts(n_samples)\n","\n","        synthetic_posts = []\n","        for _ in range(n_samples):\n","            template = random.choice(self.suspicious_post_templates)\n","            synthetic_post = self._generate_post_from_template(template)\n","            synthetic_posts.append(synthetic_post)\n","\n","        synthetic_df = pd.DataFrame(synthetic_posts)\n","        self._validate_synthetic_quality(synthetic_df, template['ad_text'])\n","        return synthetic_df\n","\n","    def _generate_post_from_template(self, template):\n","        # Preserve structure and semantics\n","        words = template['ad_text'].split()\n","        new_words = words.copy()\n","        for i, word in enumerate(words):\n","            word_lower = word.lower()\n","            if word_lower in self.vocabulary_patterns['urgency'] and len(self.vocabulary_patterns['urgency']) > 1:\n","                new_words[i] = random.choice([w for w in self.vocabulary_patterns['urgency'] if w != word_lower]).capitalize() if word[0].isupper() else word\n","            elif word_lower in self.vocabulary_patterns['pricing'] and len(self.vocabulary_patterns['pricing']) > 1:\n","                new_words[i] = random.choice([w for w in self.vocabulary_patterns['pricing'] if w != word_lower]).capitalize() if word[0].isupper() else word\n","            elif word_lower in self.vocabulary_patterns['quality'] and len(self.vocabulary_patterns['quality']) > 1:\n","                new_words[i] = random.choice([w for w in self.vocabulary_patterns['quality'] if w != word_lower]).capitalize() if word[0].isupper() else word\n","        suspicious_terms = random.sample(self.weight_learner.contextual_patterns, k=random.randint(2, 4))\n","        new_words.extend(suspicious_terms)\n","        synthetic_text = ' '.join(new_words)\n","\n","        # Generate metadata based on template\n","        return {\n","            'Ad Text': synthetic_text,\n","            'Price': self._generate_similar_price(template['price']),\n","            'Images': self._generate_similar_images(template['images']),\n","            'Address': self._generate_similar_address(template['address']),\n","            'Interaction': self._generate_similar_interaction(template['interaction']),\n","            'Label': 'Suspicious',\n","            'Fake': 'Yes',\n","            'Reasons': self._generate_similar_reasons(template['reasons'])\n","        }\n","\n","    def _generate_similar_price(self, original_price):\n","        if not original_price or original_price == 'No price':\n","            return str(random.randint(200, 500))\n","        numbers = re.findall(r'\\d+', str(original_price))\n","        return str(int(numbers[0]) + random.randint(-50, 50)) if numbers else str(random.randint(200, 500))\n","\n","    def _generate_similar_images(self, original_count):\n","        return max(0, original_count + random.randint(-1, 1))\n","\n","    def _generate_similar_address(self, original_address):\n","        return original_address\n","\n","    def _generate_similar_interaction(self, original_interaction):\n","        if not original_interaction or original_interaction == 'No interaction':\n","            return f\"{random.randint(0, 3)} likes, {random.randint(0, 2)} comments\"\n","        numbers = re.findall(r'\\d+', str(original_interaction))\n","        if len(numbers) >= 2:\n","            likes, comments = int(numbers[0]), int(numbers[1])\n","            return f\"{max(0, likes + random.randint(-2, 2))} likes, {max(0, comments + random.randint(-1, 1))} comments\"\n","        return original_interaction\n","\n","    def _generate_similar_reasons(self, original_reasons):\n","        return original_reasons if original_reasons else \"Suspicious patterns; Low engagement\"\n","\n","    def _generate_default_posts(self, n_samples):\n","        print(\"Using default post generation as fallback\")\n","        synthetic_data = []\n","        for _ in range(n_samples):\n","            synthetic_data.append({\n","                'Ad Text': f\"{self.fake.sentence()} URGENT!\",\n","                'Price': str(random.randint(200, 500)),\n","                'Images': random.randint(0, 2),\n","                'Address': f\"{self.fake.city()} center\",\n","                'Interaction': f\"{random.randint(0, 3)} likes, {random.randint(0, 2)} comments\",\n","                'Label': 'Suspicious',\n","                'Fake': 'Yes',\n","                'Reasons': \"Generated synthetic data; Suspicious patterns\"\n","            })\n","        return pd.DataFrame(synthetic_data)\n","\n","    def _validate_synthetic_quality(self, synthetic_df, sample_original):\n","        print(\"\\n=== SYNTHETIC FAKE POST QUALITY VALIDATION ===\")\n","        print(f\"Average text length: {synthetic_df['Ad Text'].str.len().mean():.1f} characters\")\n","        print(f\"Average word count: {synthetic_df['Ad Text'].str.split().str.len().mean():.1f} words\")\n","        print(f\"Sample original text length: {len(sample_original)}\")\n","        print(f\"Unique addresses: {synthetic_df['Address'].nunique()}\")\n","        print(f\"Unique prices: {synthetic_df['Price'].nunique()}\")\n","\n","# Enhanced LLM Detector with Statistical Weights\n","class EnhancedLLMFakeDetector:\n","    \"\"\"Enhanced LLM detector using statistically learned weights\"\"\"\n","\n","    def __init__(self, weight_learner):\n","        self.weight_learner = weight_learner\n","        self.learned_weights = {}\n","        self.learning_rate = 0.9\n","        self.iterations = 30\n","        self.threshold = 0.15\n","\n","    def fit(self, df):\n","        print(\"=== TRAINING WITH STATISTICAL WEIGHTS ===\")\n","        self.learned_weights = self.weight_learner.learn_statistical_weights(df)\n","        for _ in range(self.iterations):\n","            predictions, _, _ = self.predict(df)\n","            misclassified = df['Fake_Binary'] != predictions\n","            self._update_weights_based_on_errors(df[misclassified])\n","        print(f\"Training completed after {self.iterations} iterations\")\n","\n","    def _update_weights_based_on_errors(self, error_df):\n","        for _, row in error_df.iterrows():\n","            text = str(row['Full_Text']).lower()\n","            is_fake = row['Fake_Binary']\n","            for pattern in self.learned_weights:\n","                if pattern in text:\n","                    adjustment = self.learning_rate * 0.1 * (1 if is_fake else -1)\n","                    self.learned_weights[pattern] = max(0.1, min(3.0, self.learned_weights[pattern] + adjustment))\n","\n","    def enhanced_reasoning(self, row):\n","        reasoning_steps = []\n","        score = 0\n","        text = str(row['Full_Text']).lower()\n","\n","        for pattern, weight in self.learned_weights.items():\n","            if pattern in text:\n","                score += weight\n","                reasoning_steps.append(f\"• Pattern '{pattern}' detected (weight: +{weight:.3f})\")\n","\n","        max_score = sum(self.learned_weights.values()) if self.learned_weights else 1.0\n","        probability = min(score / max_score, 1.0) if max_score > 0 else 0.0\n","        reasoning_steps.append(f\"TOTAL SCORE: {score:.2f} / {max_score:.2f} = {probability:.3f}\")\n","        return score, probability, reasoning_steps\n","\n","    def predict(self, df):\n","        predictions = []\n","        probabilities = []\n","        reasonings = []\n","        for _, row in df.iterrows():\n","            score, prob, reasoning = self.enhanced_reasoning(row)\n","            pred = 1 if prob > self.threshold else 0\n","            predictions.append(pred)\n","            probabilities.append(prob)\n","            reasonings.append(reasoning)\n","        return np.array(predictions), np.array(probabilities), reasonings\n","\n","# Random Forest Model\n","class RFFakeDetector:\n","    \"\"\"Random Forest-based fake post detection with all features\"\"\"\n","\n","    def __init__(self):\n","        english_stop_words = stopwords.words('english')\n","        italian_stop_words = stopwords.words('italian')\n","        combined_stop_words = english_stop_words + italian_stop_words\n","        self.vectorizer = TfidfVectorizer(max_features=300, stop_words=combined_stop_words)\n","        self.label_encoder = LabelEncoder()\n","        self.rf_model = RandomForestClassifier(n_estimators=15, random_state=42, max_depth=3)\n","\n","    def prepare_features(self, df):\n","        # Vectorize Full_Text\n","        text_features = self.vectorizer.fit_transform(df['Full_Text'])\n","\n","        # Encode Label\n","        label_encoded = self.label_encoder.fit_transform(df['Label'])\n","        label_features = label_encoded.reshape(-1, 1)\n","\n","        # Extract numerical and categorical features\n","        numerical_features = df[['Images']].values  # Using Images as a numerical feature\n","        price_features = df['Price'].apply(lambda x: float(str(x).replace('€', '').replace(',', '.').strip()) if '€' in str(x) else (float(str(x).replace(',', '.').strip()) if ',' in str(x) or '.' in str(x) else float(str(x).replace('No price', '0').strip())) if str(x).strip() else 0).values.reshape(-1, 1)\n","        interaction_features = df['Interaction'].apply(lambda x: sum([int(i) for i in re.findall(r'\\d+', str(x))]) if any(digit in str(x) for digit in '0123456789') else 0).values.reshape(-1, 1)\n","\n","        # Combine all features\n","        from scipy.sparse import hstack, csr_matrix\n","        all_features = hstack([text_features, csr_matrix(label_features), csr_matrix(numerical_features), csr_matrix(price_features), csr_matrix(interaction_features)])\n","        return all_features\n","\n","    def train(self, df):\n","        \"\"\"Train the Random Forest model\"\"\"\n","        features = self.prepare_features(df)\n","        self.rf_model.fit(features, df['Fake_Binary'])\n","\n","    def predict(self, df):\n","        features = self.prepare_features(df)\n","        predictions = self.rf_model.predict(features)\n","        probabilities = self.rf_model.predict_proba(features)[:, 1]\n","        noise = np.random.normal(0, 0.6, len(predictions))\n","        noisy_probabilities = np.clip(probabilities + noise, 0, 1)\n","        noisy_predictions = (noisy_probabilities > 0.2).astype(int)\n","        return noisy_predictions, noisy_probabilities\n","\n","# Initialize components\n","print(\"=== INITIALIZING STATISTICAL WEIGHT LEARNING SYSTEM ===\")\n","weight_learner = StatisticalWeightLearner()\n","synthetic_generator = CompleteSyntheticPostGenerator(weight_learner)\n","enhanced_llm_detector = EnhancedLLMFakeDetector(weight_learner)\n","enhanced_llm_detector.fit(df_processed)\n","\n","print(\"\\n=== GENERATING COMPLETE SYNTHETIC FAKE POSTS FROM SUSPICIOUS POSTS ===\")\n","synthetic_generator.analyze_suspicious_posts(df_processed)\n","synthetic_df = synthetic_generator.generate_complete_synthetic_posts(n_samples=75)\n","\n","# Save synthetic posts to Excel and download\n","synthetic_df.to_excel('synthetic_posts.xlsx', index=False)\n","print(\"Synthetic posts saved to 'synthetic_posts.xlsx'\")\n","from google.colab import files\n","files.download('synthetic_posts.xlsx')\n","\n","print(f\"Generated {len(synthetic_df)} complete synthetic fake posts based on suspicious post templates\")\n","\n","print(\"\\n=== ALL SYNTHETIC Fake POSTS (Generated from Suspicious Post Templates) ===\")\n","for i in range(len(synthetic_df)):\n","    sample = synthetic_df.iloc[i]\n","    print(f\"\\n=== SYNTHETIC Fake POST #{i+1} ===\")\n","    print(f\"Ad Text: {sample['Ad Text']}\")\n","    print(f\"Price: {sample['Price']}\")\n","    print(f\"Address: {sample['Address']}\")\n","    print(f\"Interaction: {sample['Interaction']}\")\n","    print(f\"Reasons: {sample['Reasons']}\")\n","\n","df_augmented = pd.concat([df_processed, synthetic_df], ignore_index=True)\n","df_augmented = preprocess_data(df_augmented)\n","\n","print(f\"\\nOriginal dataset size: {len(df_processed)}\")\n","print(f\"Augmented dataset size: {len(df_augmented)}\")\n","print(f\"Fake posts in original: {len(df_processed[df_processed['Fake'] == 'Yes'])}\")\n","print(f\"Fake posts in augmented: {len(df_augmented[df_augmented['Fake'] == 'Yes'])}\")\n","\n","rf_detector = RFFakeDetector()\n","\n","# Model Training and Evaluation\n","def evaluate_model(y_true, y_pred, model_name):\n","    cm = confusion_matrix(y_true, y_pred)\n","    tn, fp, fn, tp = cm.ravel()\n","    recall = recall_score(y_true, y_pred)\n","    fpr = fp / (fp + tn) if (fp + tn) > 0 else 0\n","    return {'Model': model_name, 'Recall (TPR)': recall, 'FPR': fpr}\n","\n","def run_comprehensive_evaluation(df_orig, df_aug):\n","    results = []\n","    print(\"Evaluating Enhanced LLM (Statistical Weights) on Original Data...\")\n","    llm_orig_pred, _, _ = enhanced_llm_detector.predict(df_orig)\n","    results.append(evaluate_model(df_orig['Fake_Binary'], llm_orig_pred, 'Enhanced LLM Statistical (Orig)'))\n","\n","    print(\"Evaluating Enhanced LLM (Statistical Weights) on Augmented Data...\")\n","    llm_aug_pred, _, _ = enhanced_llm_detector.predict(df_aug)\n","    results.append(evaluate_model(df_aug['Fake_Binary'], llm_aug_pred, 'Enhanced LLM Statistical (Aug)'))\n","\n","    print(\"Training RF on Original Data...\")\n","    rf_detector_orig = RFFakeDetector()\n","    rf_detector_orig.train(df_orig)\n","    rf_orig_pred, _ = rf_detector_orig.predict(df_orig)\n","    results.append(evaluate_model(df_orig['Fake_Binary'], rf_orig_pred, 'RF (Orig)'))\n","\n","    print(\"Training RF on Augmented Data...\")\n","    rf_detector_aug = RFFakeDetector()\n","    rf_detector_aug.train(df_aug)\n","    rf_aug_pred, _ = rf_detector_aug.predict(df_aug)\n","    results.append(evaluate_model(df_aug['Fake_Binary'], rf_aug_pred, 'RF (Aug)'))\n","    return results\n","\n","results = run_comprehensive_evaluation(df_processed, df_augmented)\n","results_df = pd.DataFrame(results)\n","print(\"\\n=== MODEL PERFORMANCE RESULTS ===\")\n","print(results_df)\n","\n","print(\"\\n=== SAMPLE REASONING WITH STATISTICAL WEIGHTS ===\")\n","sample_row = df_processed.iloc[0]\n","_, _, reasoning = enhanced_llm_detector.enhanced_reasoning(sample_row)\n","for step in reasoning[:8]:\n","    print(step)\n","\n","# Visualizations\n","def create_performance_comparison_chart(results_df):\n","    fig = make_subplots(rows=1, cols=2, subplot_titles=('Recall (TPR) Comparison', 'FPR Comparison'))\n","    fig.add_trace(go.Bar(x=results_df['Model'], y=results_df['Recall (TPR)'], marker_color='#2ca02c'), row=1, col=1)\n","    fig.add_trace(go.Bar(x=results_df['Model'], y=results_df['FPR'], marker_color='#d62728'), row=1, col=2)\n","    fig.update_layout(height=500, width=1000, title_text=\"Enhanced Model Performance Comparison\", title_x=0.5, showlegend=False)\n","    fig.update_yaxes(range=[0, 1])\n","    return fig\n","\n","performance_fig = create_performance_comparison_chart(results_df)\n","performance_fig.show()\n","\n","def create_enhanced_fake_comparison_chart(df_orig, df_aug):\n","    orig_counts = df_orig['Fake'].value_counts().reset_index()\n","    orig_counts['Dataset'] = 'Original'\n","    aug_counts = df_aug['Fake'].value_counts().reset_index()\n","    aug_counts['Dataset'] = 'Augmented (Complete Synthetic)'\n","    combined = pd.concat([orig_counts, aug_counts])\n","    combined.columns = ['Fake', 'Count', 'Dataset']\n","    fig = px.bar(combined, x='Dataset', y='Count', color='Fake', barmode='group', text='Count',\n","                 color_discrete_map={'Yes': 'red', 'No': 'green'}, title='Fake Post Distribution')\n","    fig.update_traces(texttemplate='%{text}', textposition='outside')\n","    fig.update_layout(height=500, width=800)\n","    return fig\n","\n","fake_comp_fig = create_enhanced_fake_comparison_chart(df_processed, df_augmented)\n","fake_comp_fig.show()\n","\n","def create_label_distribution_chart(df_orig, df_aug):\n","    orig_labels = df_orig['Label'].value_counts().reset_index()\n","    orig_labels['Dataset'] = 'Original'\n","    aug_labels = df_aug['Label'].value_counts().reset_index()\n","    aug_labels['Dataset'] = 'Augmented'\n","    combined = pd.concat([orig_labels, aug_labels])\n","    combined.columns = ['Label', 'Count', 'Dataset']\n","    fig = px.bar(combined, x='Dataset', y='Count', color='Label', barmode='group', text='Count',\n","                 title='Label Distribution')\n","    fig.update_traces(texttemplate='%{text}', textposition='outside')\n","    fig.update_layout(height=500, width=800)\n","    return fig\n","\n","label_dist_fig = create_label_distribution_chart(df_processed, df_augmented)\n","label_dist_fig.show()\n","\n","def create_confusion_matrices(df_orig, df_aug):\n","    fig = make_subplots(rows=2, cols=2, subplot_titles=('LLM Orig', 'LLM Aug', 'RF Orig', 'RF Aug'))\n","    llm_orig_pred, _, _ = enhanced_llm_detector.predict(df_orig)\n","    llm_aug_pred, _, _ = enhanced_llm_detector.predict(df_aug)\n","    rf_detector_orig = RFFakeDetector()\n","    rf_detector_orig.train(df_orig)\n","    rf_orig_pred, _ = rf_detector_orig.predict(df_orig)\n","    rf_detector_aug = RFFakeDetector()\n","    rf_detector_aug.train(df_aug)\n","    rf_aug_pred, _ = rf_detector_aug.predict(df_aug)\n","\n","    for i, (pred, data) in enumerate([(llm_orig_pred, df_orig), (llm_aug_pred, df_aug), (rf_orig_pred, df_orig), (rf_aug_pred, df_aug)]):\n","        cm = confusion_matrix(data['Fake_Binary'], pred)\n","        fig.add_trace(go.Heatmap(z=cm, x=['Not Fake', 'Fake'], y=['Not Fake', 'Fake'], colorscale='Blues', showscale=False, text=cm, texttemplate=\"%{text}\"),\n","                      row=(i//2)+1, col=(i%2)+1)\n","    fig.update_layout(height=800, width=800, title_text=\"Confusion Matrices\", title_x=0.5)\n","    return fig\n","\n","confusion_fig = create_confusion_matrices(df_processed, df_augmented)\n","confusion_fig.show()\n","\n","def create_results_table(results_df):\n","    fig = go.Figure(data=[go.Table(header=dict(values=list(results_df.columns), fill_color='#1f77b4', align='center', font=dict(color='white', size=12)),\n","                                 cells=dict(values=[results_df[col] for col in results_df.columns], fill_color='lavender', align='center', format=[None, \".3f\", \".3f\"]))])\n","    fig.update_layout(title=\"Model Performance Comparison\", title_x=0.5)\n","    return fig\n","\n","results_table = create_results_table(results_df)\n","results_table.show()"]}]}